<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>日記 on The curse of λ</title>
    <link>https://myuon.github.io/tags/%E6%97%A5%E8%A8%98/</link>
    <description>Recent content in 日記 on The curse of λ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 14 Jan 2018 23:14:19 +0900</lastBuildDate>
    
      <atom:link href="https://myuon.github.io/tags/%E6%97%A5%E8%A8%98/index.xml" rel="self" type="application/rss+xml" />
    
    
      <item>
        <title>プロジェクトマネジメントを始めたい</title>
        <link>https://myuon.github.io/posts/want-to-start-project-management/</link>
        <pubDate>Sun, 14 Jan 2018 23:14:19 +0900</pubDate>
        <guid>https://myuon.github.io/posts/want-to-start-project-management/</guid>
        <description>資料  担当になったら知っておきたい「プロジェクトマネジメント」実践講座: 2ヶ月前くらいに買って読んだ ゲーム開発 プロジェクトマネジメント講座: スクエニの資料 具体例がゲーム開発だけど内容は業種を問わないと思う  プロジェクトマネジメント実践講座を読んだ 内容は大変丁寧な感じでモチベーションと具体的な例を上げつつPMの重要性、あと必要な各種書類や仕事の詳しい日本語による解説という感じ。 それなりにページ数あるけど圧縮したら15ページ+図表くらいで収まる気がする(チートシートほしい) モチベーションを十分理解している人は安心して読み飛ばしていいと思う。
個人的な感想
 PMでは「納期を守る」という感覚が一番大事っぽい やたらExcelを推してくるのは逆に言えばまともなツールが他にないのだろうなぁ リスク管理についても書いてあってなるほどと思った(リスクを先に想定しておくのは難しいけど大事っぽい) モチベーションの説明がわかりやすい プロジェクトの発足と仕事を作って人に割り振る時のマネージャーの動き方について主に書いてる感じ  読んでる時はもっと色々思ったはずだけど読んでから時間経ちすぎて忘れた
個人的に気になった方法論 「PMの話」っていうと結構マネージャーの動き方とか仕事の仕方的なものを指すこともあるんだけど(サイクルはこまめに回しましょうねとかそういう) 自分が欲しいのは方法論なのでそっちについてちょっとまとめておく
WBS &amp; ガントチャート 各node Xに対しXを作るのに必要なもの/作業を子nodeに置いた高さ4のfin. branching treeをWBSと呼ぶ(めちゃくちゃかっこいいなこの説明って思ったけど誰にも伝わらないと思う)。 WBSに実際のスケジューリングを与えるものをガントチャートという。
これらを作るのは自然なことなのだけど、問題は実際の作業の間には依存関係があることで、これを上手く管理するのは結構難しい。
基本は依存関係に沿ってトポロジカルソートして作業を進めればよいがそういうことが簡単にできるツールって意外と少ないよな 本ではExcelって言ってたが果たして
重要度-時間分割 これはスクエニの資料の方にあった話で、各作業に 重要度: 高/中/低 および かかる時間: 大/中/小 をそれぞれ割り振って3x3のボードに配置する。 手を付けるべき作業によい感じに優先順位を割り振るときに便利そう。
スケジューリング 各作業に対して締め切りを(最速見積もりと最遅見積もりの2点見積もりがいいらしい)割り振る。 その上で、要素成果物Yに対して作業X1..Xnが必要な場合、Yにかかる見積もり時間はX1..Xnの依存グラフのpathの中でもっとも合計時間が長くなるpath(クリティカルパスという)の合計になる。
当たり前ではあるけど、クリティカルパスを常に意識することは重要で、そこが一番足をひっぱるので納期に一番影響しやすい。
それと作業や成果物を諦めるという選択を行う場合、それに依存している全ての作業を切り捨てられるので全体にかかる時間もかなり変わってくるはず。 個人でやるなら人間の数は変えられないので成果物を捨てる判断が割と必要になる気がする(最初のプロジェクトが夢見がちなだけ説)
個人趣味プロジェクト運用論 PMを学びたいと思ったのは自分一人でプロジェクトを回す時にマネジメント能力足りなくておじゃんになるのが多いからだったのだけど、 まぁ世の中のPM論はほぼチームかつ仕事でやること前提なのでそのままでは使えないってことも結構ある。
ので自分が趣味プロジェクトでPM真面目にやるならこうしたい的な話
締め切りは時刻でなく時間 本でもたいていのtodo管理ソフト的なのでも大体何時何分が締め切りってなってることが多いんだけどこれはリアル生活に影響を与えすぎるので 時間で(何時間、みたいな)見積もりを立てるべきだと思う。
その上で日何時間、週何時間作業して概ね納期はいつ、というのを考えるべき。これは多分PMではなくライフマネジメント的なところ。
WBS &amp; ガントチャート WBSなんて分かればいいので構造化文書なら何でも(markdownかorgあたり)いいってなるが、その後ガントチャートに起こすことを考えるとちょっと考えたほうがいい。 ガントチャートでは締め切り(2点見積もり)を設定した上でそれを時期順に並べ、依存関係が簡単に分かるように図示するという作業が必要になるので結構難しい。
依存関係は単に枝分かれならともかく合流(作業XとYが終わって初めてZに取り掛かれる、みたいなやつ)があるので構造化文書でこれを図示するのは厳しい。 個人的にはテキストで依存関係を明示して(各作業の親作業を登録しておいて)dotとかでグラフ化したものを印刷して机に貼っとくとかするのが最強なのでは説がある。
作業の流れを把握するにはグラフ化されたものが欲しいけど、完了報告&amp;修正とか入れるならテキストでどうにかしたいという欲もあり色々大変。
あと上では構造化文書っていったけどredmineみたいなやつでもいい気がする。あれってどうなんだろ、個人で使うにはめんどくさくならないかな。
スケジューリング 自分はよく作業をボトムアップで見積もるけど、その前に「プロジェクトそのものに飽きる」という悲しい問題があり、それを考えると納期は個人趣味プロジェクトでも確かに存在する。 そういう視点が今までなかったのでよくプロジェクトがエターナってたけど、プロジェクトに飽きる前に最低限の完成形までもっていくというのが実は一番大事なのでは説がある。</description>
      </item>
    
      <item>
        <title>V.S. Hask圏</title>
        <link>https://myuon.github.io/posts/versus-hask-category/</link>
        <pubDate>Fri, 05 Jan 2018 22:52:56 +0900</pubDate>
        <guid>https://myuon.github.io/posts/versus-hask-category/</guid>
        <description>Hask圏 Haskellをラムダ計算とみなした時のsyntactic categoryをHask圏というのがよく言われる定義である(と思う)。 Haskellのtypeをobject, hom(A,B) をjudgement x:A |- M:B 全体(を適当な同値関係で割ったもの)とみなして圏を作る(このときしばしばjudgementとこのjudgementから作ったfunction λx.M を区別しない)。
さて基本的な結果として次のことが知られている。
 Hask#Is Hask even a category? Hask is not a category  というわけでHask圏は圏にならないのでそのようなものは存在しない。
Why not? これはundefinedというヤバイ元の存在とcall-by-needの悪魔的評価規則が合わさりこのような現象が生み出される。 主にこの2つが悪さをしているので、この辺をどうにかできればHask categoryが作れる可能性がある。
undefinedを抜く undefinedは「評価ができない(プログラムが正しい値を返さない)」ことを表す元で、普通は(多分)domainのbottomに対応させ、無限ループするプログラムの解釈なんかに使う。 undefinedを抜くためにはプログラムが常に停止して値を返す必要があるので無限ループができないようにする必要がある。
とまぁ言うのは簡単でfixpointを抜けばいいだけなんだけどfixpointもないcalculusがプログラミング言語を名乗るのは片腹痛いのでこれはちょっとナシかなという気持ちになったりする。
call-by-needを捨てる call-by-needを捨てて、call-by-valueとかcall-by-nameとかそういうやつに行くというのも1つだと思う。 GHCのStrict拡張を入れてライブラリもStrict付けて全てビルドしなおせばそれはもうcall-by-valueになる(よね？)はずだったり、まぁcall-by-nameもcall-by-needみたいなもんやろという乱暴な考え方によりcall-by-needを捨てるのは現実的な案だと個人的には思う。
しかしcall-by-needではないHaskellはそれはもうHaskellなんですか(反語)ということもあるのでアイデンティティを捨てる勇気が必要かもしれない。
ここからポエム いずれにせよHaskellという純粋関数型プログラミング言語でHask圏を考えるというのは無理があるということが分かるのだけれど、じゃあHask圏についてcomputer science的に意味がないかというと個人的にはそんなことはないと言いたかった。
個人的に、CSとは「計算機で観測可能な現象に説明をつける」学問であると思うので、実際にHaskellという言語で観測可能な現象について圏論で説明をつけようとする営み自体が否定されることはないと思う。 計算機が発明されて間もないからなのか人類が遅れてるのかはわからないけれど今は計算機の説明を付けるために用意した圏論的なモデルが上手くモデルとして機能していない(モデルが現象の構造を反映する力が弱い)のかもしれないけれど、とりあえず数学的にわかりやすいモデルを取ってきていくつかの技術的な難しさ(categoryにならないとかね)を無視した上で似たような現象をシミュレーション出来ないかを調べている段階だと思えばいいんじゃないかなと。
実際にHaskellに限らず色々なプログラミング言語で観測可能な現象について圏論の方からそれっぽいモデルを提供するぜ的研究はあちこちで見られるので、call-by-needとかにも上手い説明を付けられる直観的で構成が大変じゃないモデルを誰か思いついてくれればよいのだけど。
data &amp; codata HaskellのListがListかつColistであるというのは有名な話だけれど、こういうdatatypeかつcodatatypeがとれるような圏を考えるきっかけは(歴史的なことには私は詳しくないのだけれど)こういうプログラミング言語からの現象が先にあったのかな？と想像してる。 ちなみにこのようなcategoryはalgebraically boundedと呼ばれたりします。
enrichmentの隠蔽 関係ないのだけどHask categoryで圏論やろうとするとenrichmentが色々効いてきて困る、みたいな話をよく聞くし自分もそう思うのだけれど、実はenrichmentは結構避けられる(隠蔽できる)のかもと書いていてちょっと思った。
例えばFunctorのfmap methodは fmap: (Functor F) =&amp;gt; (A -&amp;gt; B) -&amp;gt; FA -&amp;gt; FB という形で書かれる。 これはHaskからHask(の適当なsubcategory)へのfunctorのfmapの型になっているが、圏論的には実際は次のような形をしているはずである: fmap: Hask(A,B) -&amp;gt; Hask(FA,FB) .</description>
      </item>
    
      <item>
        <title>2017年振り返り</title>
        <link>https://myuon.github.io/posts/end-of-2017/</link>
        <pubDate>Sun, 31 Dec 2017 20:24:14 +0900</pubDate>
        <guid>https://myuon.github.io/posts/end-of-2017/</guid>
        <description>2017年が終わりそうなので(去年の記事)。
アウトプット プログラミング&amp;定理証明 github見たら意外と色々やってた。 古い順に
 DOTO: todoリストをアレするwebアプリ。これは就活用に作ったような気がする。TypescriptとReactを使ってやっぱクライアントサイドはつらいって思った記憶。今ならElmとかで作ると思う。 CatQ: Coqによる圏論の形式化。Setoidベースでやったけど、圏論側で仮定したくなる公理の妥当性がCoqの上でも妥当なのかとかが無限に気になりやっぱ真面目にやるなら依存型使うのはダメだなと悟って放棄。 dan: やったことリストを登録してgithubの草みたいに表示したりするやつ。最近使ってない bwitterkuchen: CUI Twitterクライアント。nyantreamを作ることにしたのでメンテはしてないけどしばらく使ってた。 avix: AviUtlという動画編集ソフトのexoファイルを生成するためのHaskellライブラリ。動画編集のときに使おうと思って作ってから一度も使ってない。 sdlight/widx: sdlightはSDLのラッパーライブラリ(ゲームを作ろうとしてついでに作った)。widxはsdlightからwidgetだけを切り離してインターフェイスだけ提供するライブラリ、だったけどBackpackのバグが直らないので開発ができない状態になってる。 nott: Type Theoryに関するまとめノート的なものを置くところ(プログラミング関係ない)。今のバタバタが終わったらまた再開したい。 typed: 型付きラムダ計算の実装(TaPLみながら)と定理証明を雑に投げ込む場所。 claire: LKベースのproof assistant。今年の一人アドベントカレンダーでやったやつ。 myuon.github.io: このブログ。今年入ってからはてなブログからgithub pagesでホスティングすることにし、今はhugoを使うのに落ち着いてる。 nyantream: CUIストリームクライアント(絶賛開発中)。時報/Twitter/Gmail/Slackに対応。GUI版も作りたい。  あと開発中のゲーム(最近開発してないけど)もあった。sdlight/widxが真面目に動くようになれば再開したいけどどうだろう。
絵 自分の中で二次創作という行為への折り合いが付き、二次創作を行えるようになったおかげか特に10月以降はかなり積極的に絵を描くようになった。 多分今年が一番絵が上手くなった(画力向上よりも魅せ方・道具の使い方的な意味で)1年だった気がする。
あとブログ漁ってたら今年の初めに新しいペンタブを買ったようなのでそのおかげもかなりある。 というか、今までラップトップしか持ってなかったのをデスクトップPCを買うのに合わせて21.5インチモニターを買ったので、画面が広くなるのに伴ってペンタブも大きくしたというのが正しい。 作業スペースが広くなるのは良さしかなかった。
最近は左手デバイス(キーボード)が欲しいお年ごろ。
動画編集 去年は色々やってたんだけど今年はあんまりやってない。 (AviUtlはwineでほぼ全機能が動くのに)ボイスロイドがwindowsでしか動かないせいで、動画編集とボイスロイドの録音が別PCでしないといけないのが結構つらいなになってきた。
windowsライセンス欲しい、買ってデスクトップPCの方に入れたい。
ブログ Github Pagesでブログをホスティングすることにしたので、emacsでブログがかけるようになり(今もorg-modeでかいてる)、少なくとも新しく記事を書くときの心理的障壁はだいぶ下がった。
そもそもブログ自体もうちょっと色々手を入れないと不便なところがあるのだけど、まぁemacsでほいほいかける環境は整えたので、頑張って書いていきたいなと思った。
一人アドベントカレンダーの時に確かにめっちゃ書いたけど、それ以外だとあんまり記事更新できてないので2018年はブログでアウトプットするのは積極的にやっていきたい。
生活的なこと 学生生活 割とずっと研究してた。結果が出ないつらさを知ったりした。
数学の研究は精神の健康に悪い。マジで悪い。
デスクトップPCを買った 自作PC組んだよ2017
快適of快適になった。せっかくグラボ積んだのに(といっても大したアレじゃないけど)linux機なこととそもそも自分があんまりゲームやる人種じゃないせいで全然役に立ってないのがちょっともったいない感。
でも動画編集するときのエンコードは前に比べたら爆速になったのでそれはいいところ。
コンテンツ消費 今年も去年に増してコンテンツにお金を投じたりした気がする。 何より今年の始めにデレステ初めて、課金もしたし1年間ほぼ途切れず続けてるのでここまで1つのコンテンツで長く遊んでいるのは中々珍しいなと思ったりしながら今日も遊んでた。 音ゲー楽しいなと思ったけどアーケードに手を出す勇気はない。
プロジェクトマネジメント 結局本を1冊読んだだけなのだけれどプロジェクトマネジメントの勉強をした。 去年のまとめで、スケジュール管理の重要さを自覚した、とか方法論を身に着けたい、みたいなことが書いてあるけど、ちょうどそういうマネジメント的なことがずっと気になっていたのでいっちょ本でも読むかで本を読んでみたりした。
ただし個人の趣味的活動に企業のお仕事的プロジェクトマネジメントを持ち込んでもあまり上手く行かなそうなので、まだ何も活かせてはない。
この辺はもっと色々調べたり考えたりした上で2018年はマネジメントぢからをもっと磨いていきたい。
進路 就活は今年の6月くらいに終わった気がする(これ)。 なので来年4月からは就職して働き始めることになりそう。</description>
      </item>
    
  </channel>
</rss>
