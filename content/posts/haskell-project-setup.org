---
title: Haskellプロジェクトを始めるにあたって
date: 2017-12-15T00:04:21+09:00
toc: true
tags: [haskell,AdC2017]
---

*これは[[https://qiita.com/advent-calendar/2017/myuon_myon_cs][一人Computer Scienceアドベントカレンダー]] 15日目の記事です。*

-----

Computer Science何も関係ないけど大丈夫か？(まぁ一応Haskellはテーマの1つであったというアレはあるけど)

今回はHaskellで開発を始める時にいつもやってるセットアップの作業とかの説明をします。
どうも、Haskellerによるstackみたいな周辺ツールの情報の発信が足りてないんじゃないかみたいな噂が流れてきたのでじゃあまぁなんか記事にするかという流れです。

ところでstackの説明はググれば日本語の記事がそれなりにヒットするようになったと思うのでここではあんまり説明しません。

* 開発環境構築

このセクションは初回のみです。

** Haskellのインストール

stackはプロジェクトを管理するツールっていうのかな？まぁビルドツールになったりパッケージマネージャーになったりghcを管理するのに使ったりなんかまぁそういうツールです(なんて言えばいいんだろう)。

linux系なら[[https://docs.haskellstack.org/en/stable/README/][公式ドキュメント]]を見ながら次のようにするといいと思います。

#+BEGIN_SRC sh
  $ curl -sSL https://get.haskellstack.org/ | sh
  # stackのinstall

  $ stack setup
  # GHC(コンパイラ)を入れる

#+END_SRC

stackを入れてから ~stack setup~ でコンパイラが入るのでのんびり待ちます。
 =~/.local/bin/= にパスを通しておきます。

** エディタ

- emacsの人: [[https://commercialhaskell.github.io/intero/][intero]]
- spacemacsの人: [[https://github.com/syl20bnr/spacemacs/tree/master/layers/%252Blang/haskell][haskell layer]]
- IntelliJ IDEAの人: [[https://github.com/rikvdkleij/intellij-haskell][intellij-haskell]]

を使いましょう。その他のエディタは知らない(emacs/intellijのプラグインが特に優秀みたいなので可能ならどっちかを使うのがいいんじゃないでしょうか)。

* プロジェクトセットアップ

** stack new

さてHaskellでプロジェクトを始めます。

#+BEGIN_SRC shell
  $ stack new [プロジェクトの名前] simple-hpack
#+END_SRC

simple-hpackというのはテンプレートの名前です。ここではhpackというツールを使っています(私が普段から使っているので)。

さて少しだけ説明をすると、stackという便利ツールが登場する前はみんなcabalというビルドツールを使っていました。cabalはcabalファイルの情報を読み込んでビルドをするのですが、cabalファイルはちょっと面倒な部分があったのでこれをもっと簡単に書けるようにするためにhpackというツールが最近登場しました。
hpackはpackage.yamlをcabalファイルに変換するツールですが、今はstackが公式にhpackをサポートしたので、プロジェクトでpackage.yamlに必要な情報を書くとそれがhpackによってcabalファイルに変換されてcabalによるビルドが走るというところまで全てstackが面倒を見てくれます。

正直好みですが個人的にはhpackの方が楽なのでこれを使うためにここではsimple-hpackのテンプレートを指定しています。

また、以下の説明は全てhpackのpackage.yaml前提です。cabalファイルはまた少し違うので[[https://github.com/sol/hpack][対応表]]で各自調べてください。

** configuration

stack newが終わると必要なファイル群と ~stack.yaml~ と ~package.yaml~ が出来ます。
ここでpackage.yamlを適当に編集します(しなくても問題ないです)。

#+BEGIN_SRC shell
  $ stack build
#+END_SRC

でビルドできればOKです。

** git init

そして私はこのタイミングでgit関連のあれこれをします。
gitignore生成には[[https://github.com/simonwhitaker/gibo][gibo]]を、git強化に[[https://github.com/nvie/gitflow][git-flow]]を使っています。

#+BEGIN_SRC shell
  $ gibo Haskell > .gitignore
  # .gitignore を作る

  $ echo "*.cabal" >> .gitignore
  # hpackを使っているならcabalは不要

  $ git init && git add . && git commit -m 'initial commit'

  $ git flow init
#+END_SRC


* そして開発へ

以下は必要になった時に必要になった項目を随時行います。

** パッケージの追加

パッケージを追加したいときはpackage.yamlのdependenciesに追加します。
バージョンの指定とかできますが別にしなくていいです。

#+BEGIN_SRC text
  dependencies:
    - base
    - lens
    - mtl
    ...
#+END_SRC

** hackageのパッケージの追加

上のやり方で上手く行くのはパッケージがstackage(Haskellのパッケージを各バージョンごとに登録しとくところ)にある場合だけです。
hackageにパッケージがある場合はstack.yamlのextra-depsに *バージョンまで含めて* 書きます。

#+BEGIN_SRC text
  extra-deps:
  - package-1.2.3.4
  ...
#+END_SRC

といっても、これが必要な場合はstack buildした時点でstackがこういう風に書けって教えてくれるので、それをコピペするだけでいいです。

** githubのパッケージの追加

例えばgithubにしかパッケージがない場合も同じくstack.yamlのextra-depsに追加します([[https://docs.haskellstack.org/en/stable/yaml_configuration/#git-and-mercurial-repos][参照]])。

#+BEGIN_SRC text
  extra-eps:
  - git: git@github.com:hoge/piyo.git
    commit: commitID
#+END_SRC

** default-extensions

よく使うGHC拡張はpackage.yamlのdefault-extensionsに書いておきます。

#+BEGIN_SRC text
  default-extensions:
  - Strict
  - LambdaCase
  - GADTs
  - TemplateHaskell
  ...
#+END_SRC

まぁこの辺はお好みで。

** テスト

好きなものを使えばいいと思います。
私は[[https://www.stackage.org/package/tasty][tasty]]をよく使います。tastyは[[https://www.stackage.org/package/tasty-hunit][tasty-hunit]]や[[https://www.stackage.org/package/tasty-quickcheck][tasty-quickcheck]]なんかがあるので色んなテストのかき方が出来たり[[https://www.stackage.org/package/tasty-discover][tasty-discover]]でテストを自動で検出して走らせたりできるので便利です。

package.yamlに

#+BEGIN_SRC text
  tests:
    hoge-test:
      source-dirs: test
      main: Driver.hs
      dependencies:
      - base
      - hoge
      - tasty
#+END_SRC

みたいにして書いて、 ~test/Driver.hs~ に

#+BEGIN_SRC haskell
  {-#
    OPTIONS_GHC -F
    -pgmF tasty-discover
    -optF --tree-display
  #-}
#+END_SRC

と書くと使えます。 ~stack test~ であとは勝手にテストが走ります。便利。

** stackの参照するresolverのバージョンを上げる

stackはresolverで指定されたsnapshotを常に参照します(globalでもlocalでも)。
しばらく開発しているとこれが古くなったりするので、例えば

#+BEGIN_SRC text
  $ stack config set resolver lts
#+END_SRC

とかするとltsの最新版にあげてくれます。

** リソースファイルを含める

(例えば)executableなパッケージで実行には特定のリソースファイルが必要とします。
こういう場合はpackage.yamlのdata-filesに書きます。

#+BEGIN_SRC text
  data-files:
  - resources/hoge.txt
#+END_SRC

ところでこのパッケージが ~testpackage~ という名前だった場合、

#+BEGIN_SRC text
  library:
    other-modules:
    - Paths_testpackage
#+END_SRC

と書いておくと、

#+BEGIN_SRC haskell
  import Paths_testpackage

  -- data-filesに書いたファイル名からそのファイルのパスを得るには次の関数を使う
  -- getDataFileName :: FilePath -> IO FilePath
#+END_SRC

みたいなことが出来ます([[https://www.haskell.org/cabal/users-guide/developing-packages.html#accessing-data-files-from-package-code][参照]])。


** executableをMain.hs以外から実行する

executableでMain.hs以外から実行しようとすると怒られるかもしれませんが ~-main-is~ オプションで回避できます。

#+BEGIN_SRC text
  executables:
    hoge:
      source-dirs:
      - app
      main: Run.hs
      ghc-options: -main-is Run
#+END_SRC

* おわりに

果たしてこういう記事が求められていたのだろうか、よくわからない(違う気がする)。

こういうのも書いてほしいっていう要望があれば追加するので言ってください。

