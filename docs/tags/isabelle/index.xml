<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Isabelle on The curse of λ</title>
    <link>https://myuon.github.io/tags/isabelle/</link>
    <description>Recent content in Isabelle on The curse of λ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 27 Oct 2019 15:33:19 +0900</lastBuildDate>
    
      <atom:link href="https://myuon.github.io/tags/isabelle/index.xml" rel="self" type="application/rss+xml" />
    
    
      <item>
        <title>IsabelleによるCBC CasperのSafetyの証明をしました</title>
        <link>https://myuon.github.io/posts/isabelle-cbc-casper-safety-proof/</link>
        <pubDate>Sun, 27 Oct 2019 15:33:19 +0900</pubDate>
        <guid>https://myuon.github.io/posts/isabelle-cbc-casper-safety-proof/</guid>
        <description>日記です。
リポジトリ: LayerXcom/cbc-casper-proof
概要 (私は LayerX の人ではないですが)LayerX 社の人と色々あって CBC Casper というブロックチェーンのプロトコルの検証作業のお手伝いを定理証明士として行いました。
半年くらいかかったけどやりたかった証明についにたどり着いたよという話。
CBC Casper って何 わからん。(無知)
何かブロックチェーンのプロトコルの名前らしい。Ethereum 財団が目をつけてるらしい。いわゆるビットコインとは違ってブロックを頑張ってマシンをぶん回してマイニングしたりしないらしい(ビットコインは PoW で CBC Casper は PoS)。
詳しいことは詳しい人に聞いたほうがいいよ(真理)。
cf: CBC Casper と形式的検証
Isabelle で検証って何するの ブロックチェーンはコンセンサス(分散合意)アルゴリズムの一種で、みんなで合意を取りましょうみたいなやつ。コンセンサスアルゴリズムで言われる正当性というのは主に次の 2 つ。
 Safety: 1 つの round でたかだか 1 つの値にしか合意しないこと Liveness: 必ず 1 つの値にいずれは合意できること(一生合意できないみたいな状態に陥らないこと)  実際のステートメントでは色々条件はあるがそういうのは一旦おいておいて、CBC Casper に対しては Safety は示されていて(論文があり) Liveness はまだ示されていないみたいなステータスだったはず。定理証明はどちらもされていないので、今回は簡単な(というか参考になる論文がすでにある)Safety の方を示した。
実際の証明について 証明は基本的に論文に沿って進めた: https://github.com/cbc-casper/cbc-casper-paper
ただし Safety Oracle の証明について、論文では clique というタイプのグラフについての性質を示すことで証明を行っているが、今回はこれを inspector(finality detector)というやつに一般化して証明を行った。
完走した感想 ドメイン知識がないこともあってめっちゃ大変だったというのが正直なところ。アタリマエであるが、論文に書いてない行間を埋める作業や誤植・足りない仮定を追加するなどの作業はちゃんと理論側の理解がないとやはりつらい。
一方で、今回は「理論側は別の人・定理証明は私」という分担を行ったが、そういう感じでもこういう証明の仕事を行うことは不可能ではないなという手応えを感じることが出来たのも良かった気がする。</description>
      </item>
    
      <item>
        <title>Nominal Isabelleとラムダ計算 その4</title>
        <link>https://myuon.github.io/posts/nominal-lambda-4/</link>
        <pubDate>Wed, 13 Dec 2017 00:04:03 +0900</pubDate>
        <guid>https://myuon.github.io/posts/nominal-lambda-4/</guid>
        <description>これは一人Computer Scienceアドベントカレンダー 13日目の記事です。   さて、前回はChurch-Rosserを示しました。今回は型付きラムダ計算もやっとかないとだめかなと思ったのでsimply-typedのtype soundnessです。 流石にラムダ計算の話題ばっかりで疲れてきたと思いますが今回は1日ですべて終わらせます。  まぁCRに比べればずっと簡単なのでいけるでしょ(適当)  今回解説するコードは以下にあります:  myuon:typed/theory/Simply.thy Simply-typed  nominal_datatype simply = TVar string | TArr simply simply (infixr &amp;#34;→&amp;#34; 90)   simply-typedな型はtype variableとfunction typeからなる。 typeの定義自体は特にbinderを含まないが、後に型を含むnominal_inductiveの宣言をしたりする都合上nominal_datatypeにしてある。 valid context   さて型付けに必要になるcontext(変数とその型を組にしたもの)は同じ変数を複数含んではいけないという制約があるので、それを表すvalidという述語を定義する。 inductive valid :: &amp;#34;(name × simply) list ⇒ bool&amp;#34; where valid_nil: &amp;#34;valid []&amp;#34; | valid_cons: &amp;#34;⟦ valid Γ; x ♯ Γ ⟧ ⟹ valid ((x,T)#Γ)&amp;#34; equivariance valid lemma elim_valid_cons: &amp;#34;valid ((x,T)#Γ) ⟹ valid Γ ∧ x ♯ Γ&amp;#34; by (cases rule: valid.</description>
      </item>
    
      <item>
        <title>Nominal Isabelleとラムダ計算 その3</title>
        <link>https://myuon.github.io/posts/nominal-lambda-3/</link>
        <pubDate>Tue, 12 Dec 2017 00:05:37 +0900</pubDate>
        <guid>https://myuon.github.io/posts/nominal-lambda-3/</guid>
        <description>これは一人Computer Scienceアドベントカレンダー 12日目の記事です。   前回はCRの証明の途中までやったので続きです。 内容多めですが今回で頑張って終わらせます。 confluenceへ (cont.)  coherent lemmas   parallel betaのcoherent lemmaを示す。 証明は基本的に場合分けやるだけなので省略するとして、まぁ常識的なことが成り立つよねという補題である。(説明の放棄) lemma elim_pb_var: &amp;#34;Var x ⇒β N ⟹ N = Var x&amp;#34; lemma elim_pb_abs: assumes &amp;#34;lam [x]. M ⇒β N&amp;#39;&amp;#34; &amp;#34;x ♯ N&amp;#39;&amp;#34; obtains N where &amp;#34;M ⇒β N&amp;#34; &amp;#34;N&amp;#39; = lam [x]. N&amp;#34; lemma elim_pb_app: assumes &amp;#34;M1 $ M2 ⇒β N&amp;#34; obtains N1 N2 where &amp;#34;N = N1 $ N2&amp;#34; &amp;#34;M1 ⇒β N1&amp;#34; &amp;#34;M2 ⇒β N2&amp;#34; | x P P&amp;#39; L where &amp;#34;M1 = lam[x].</description>
      </item>
    
      <item>
        <title>Nominal Isabelleとラムダ計算 その2</title>
        <link>https://myuon.github.io/posts/nominal-lambda-2/</link>
        <pubDate>Mon, 11 Dec 2017 00:13:11 +0900</pubDate>
        <guid>https://myuon.github.io/posts/nominal-lambda-2/</guid>
        <description>これは一人Computer Scienceアドベントカレンダー 11日目の記事です。   前回はNominal Isabelleの説明と証明を少しだけしました。 今回から徐々に証明したいことの内容(ラムダ計算そのもの)の話もしていきます。 equivarianceとnominal_inductive  補題   さて2つの補題を示しておく。 lemma subst_eqvt[eqvt]: fixes π :: &amp;#34;var prm&amp;#34; shows &amp;#34;π∙(t[x ::= s]) = (π∙t)[(π∙x) ::= (π∙s)]&amp;#34; apply (nominal_induct t avoiding: x s rule: strong_induct) apply (simp add: perm_bij) apply (simp) apply (simp add: fresh_bij) done lemma subst_rename: assumes &amp;#34;x ♯ t&amp;#34; shows &amp;#34;([(x,y)]∙t) [x ::= s] = t [y ::= s]&amp;#34; using assms apply (nominal_induct t avoiding: x y s rule: lambda.</description>
      </item>
    
      <item>
        <title>Nominal Isabelleとラムダ計算 その1</title>
        <link>https://myuon.github.io/posts/nominal-lambda-1/</link>
        <pubDate>Sun, 10 Dec 2017 00:13:17 +0900</pubDate>
        <guid>https://myuon.github.io/posts/nominal-lambda-1/</guid>
        <description>これは一人Computer Scienceアドベントカレンダー 10日目の記事です。   前回、4日分に分けてIMPのoperational semanticsの証明の解説をしてみました。 今回はより発展的な話題として、Nominal Isabelleを用いてChurch-Rosser性やSimply-typedのsoundnessなどを示してみようと思います。  定理証明に詳しい人ならもうこれだけでつらさが伝わるかと思うのですが、実際証明はかなり大変なので今回は発展編(応用編)としてこの話題を選んでみました。  今回解説するコードは以下に置いてあります。  myuon/CR.thy 前置き  ラムダ計算   この記事をわざわざ読む人はラムダ計算についてはある程度知っている人が多いと思うのですが、簡単に説明をしておきます。  ラムダ計算は計算のモデルとなるべく作られた言語で、「関数を作る・作った関数を呼び出す(関数を適用すること)」の2つの操作を基本とします。 ここでの「計算」とは数を与えたら数を返す、のような、電卓で行われるような最も我々がイメージしやすい計算のことです。ラムダ計算ではこの「計算」を、項を別の項に変換するような操作によって実現します。 これは単に 1+2 という項があったらそれを 3 へと変換する、あるいは f(x)=x+2 という項があるときに、 f(10) を 12 へと変換する、そういう操作を計算と呼びますというだけなので難しいことはありません。  さてラムダ計算の項(何がラムダ計算の項かはまだちゃんと説明していないけど)は通常変数の付け替えを同一視します。具体的には f(x)=x と f(y)=y を区別しないのですが、この同値をα同値と呼びます。  ラムダ計算の定理証明で最も厄介なのはこのα同値性の扱いで、というか定理証明による形式化ではそもそも「同一視」とか「同値関係で割る」みたいな操作を扱うのがめちゃくちゃ苦手です。 これは主に、一般に同一視されているかが計算によって判定可能でないこと1と、同一視された項同士の計算はしばしば(人間は気にしないけど)それらの項の変形の構成に依存するからだと個人的には思っています。  はてさて真面目にラムダ計算の形式化をやると地獄をみますが、そんな時にNominal Isabelleが便利なんですよ〜！っていうのがこの導入です。 Nominal Isabelle   Nominal Isabelleは(ラムダ項だけではなく; ラムダ計算みたい題材が最も威力を発揮することは間違いないが)binderを含むデータ型を扱う際に利用すると便利なライブラリである。 binderは [x]. M のような形をしていて、この束縛変数 x の変数名の付け替えを区別しないような項である。  Nominal Isabelleではこの変数の付け替え、「例えば変数 x を y に付け替える」という操作を「置換 (x,y) を作用させる」という操作とみなす、というところからスタートする。 より厳密には次のようなことである: 無限の変数からなる集合 V が与えられている時、 List (V×V) の元を置換と呼ぶ。このとき置換の作用を ∙ でかくことにし、 ((x,y)::xs)∙M := xs∙(Mに出現する自由変数xをyに、yをxに書き換えた項); []∙M := M のようにして定める。  上の変数の書き換えの部分は当然項 M が属するデータ型がどのように定義されているかに依存するが、この辺のあれこれをいい感じにやってくれるのがNominal Isabelleであり、Nominal Isabelleが提供するコマンドだったりするわけである。  また、以下でも登場するが、ある変数 x が項 M (複数ある場合はタプルとかにする)に(自由)出現しない、ということを x♯M で表す。  (余談だが、こういうbinderの変数のつらみというのはほか言語でも当然あるので、例えば(こちらはde Bruijn indexを使った代入規則の自動化に限定されてはいるが)Coqのautosubstというライブラリもあって、同じくラムダ計算の定理証明などに威力を発揮するようだ。) nominal_datatype  はじめに   Nominal IsabelleはHOLのライブラリ群の中に含まれているはずで、 imports &amp;#34;~~/src/HOL/Nominal/Nominal&amp;#34; とかでインポートできる。(~~ でIsabelleがインストールされているパスを表す) ライブラリのコードはNominal theoryそのものがここ、例がここにあるので見ると良いかもしれない。 (例に今回の目標と同じCRを示しているのがあるけれど、(大まかな流れは同じだけど)これは特に見てないので私の証明とは色々違うと思います)  また、チュートリアルというかマニュアルが以下にあるので必要に応じて参照して欲しい。  nominal_datatype_manual.</description>
      </item>
    
      <item>
        <title>IsabelleについてのQ&amp;A</title>
        <link>https://myuon.github.io/posts/isabelle-qanda/</link>
        <pubDate>Sat, 09 Dec 2017 00:03:23 +0900</pubDate>
        <guid>https://myuon.github.io/posts/isabelle-qanda/</guid>
        <description>  これは一人Computer Scienceアドベントカレンダー 9日目の記事です。   さて、Isabelleの入門編・基礎編が終わったところで、お口直しに(？？)Isabelleで証明していると遭遇するかもしれない疑問に答えたりする記事を用意してみました。  というか、私がIsabelleを学ぶ過程で公式のリファレンス以外に困った時に頼れるものがなかったりして大変苦労したのでせめて後の人のために身についたノウハウは記事に還元していきたいという気持ちからこういうコーナーを挟んでみました。 Syntax関係  矢印がいっぱいあるんだけど何     =&amp;gt; : HOLのfunction type constructor    ==&amp;gt; : Pure logicのimplication    --&amp;gt; : HOLのimplication   Pure logicってなんですか   (この辺の話は後半のところでもやる予定なんですが)Isabelleはライブラリのとは別に組み込みのロジックあって、これがPure logicと呼ばれています。 そもそもIsabelleは本来Pure logic上で証明を行うproof assistantなんですが、このPure logicの上に別のlogicを構成することが出来て、それがHOLやZFCです。  なのでHOLの証明は内部的には全てPure logicの証明図に置き換えてcheckされます。 AgdaやCoqなどの言語ではこういうことはしない(組み込みのものをそのまま使う)ので慣れないと不思議に感じるかもしれません。 依存型とかないんですか   ないよ(無慈悲) 知らないキーワード・コマンド・attributeが出てきた/便利なコマンドについて知りたい     isar-ref.pdfのAppendixにquick referenceあるので眺めるとよいかも？   証明関係  Sledgehammerと仲良くなれない   これは慣れもありますが、 (1) goalを優しくする (2) 証明の選び方 の2点がポイントです。  まずsledgehammerは優秀とはいえそれでも人間の「自明」とはかなり感覚が違います。 そもそも人間が自明だと思っていてもformalizeにはたくさん補題が必要だったりするので、出来る限りsledgehammerに与える命題は分かりやすく、すぐ示せそうなものだけにしたほうがいいです。  あと、余分な仮定が多いと探索が失敗しやすいです。goalが複雑なときは示したい命題を補題として切り出したりしたほうがいいこともあります。  それと、どうしても上手くいかないときは命題を見直しましょう。「簡単なはずなのにsledgehammerが答えを返さないぞ？」ってときはそもそも間違っている(goalが成り立たない)ことがあります。  次に、探索に成功し証明が複数出た場合、可能ならば簡単で応答の早い証明を選んだほうがいいです。 気をつけるべきはmetisで、これは現実的な時間では終わらない場合があるので避けられるならmetisを含まないものにするか、またはmetisに与えられた補題で先に使えるものは使ってしまいましょう。  例えば、 by (metis lemmaA lemmaB lemmaC)   の時に、lemmaAが先に適用されてそれ以後使わないことがはっきりしているなら apply (rule lemmaA) by (metis lemmaB lemmC)   としたほうが応答が早くなります。あるいはapplyの後にもう一度sledehammerをかけてもいいでしょう。 自動証明コマンドって使い分けるもの？   ある程度はね。    simp: 式変形のみ    auto: 便利コマンドに見えるけれどこいつは(今注目していないものも含めて)全てのgoalに対して変形を行うので注意が必要, 代わりに失敗しても(完全にゴールが解消できなくても)ある程度変形した形を保ってくれるのでsimp_allの代わりに使える場合もある    fastforce: autoみたいに使えて現在のgoalに対する変形しかしないので便利 代わりに証明完了or失敗(何もしない)で挙動が極端    blast: 体感では汎用的な証明力が強い。代わりにauto/fastforceと違ってsimp add:できないので打つのがめんどくさい    その他: 自動証明コマンドはいろいろあるけど、これ以外はsledgehammerが返した時に大人しく従うくらいで自分から使う必要は多分ない   一々仮定に名前付けるのめんどい   lemmaやtheoremのassumesに現れる仮定や、Isarで名前を付けられる命題は項をスペースで区切って列挙が出来ます。 具体的に、 &amp;#34;A&amp;#34; &amp;#34;B&amp;#34; みたいに横に並べることが出来て、これには一度に名前を付けられるので、 x: &amp;#34;A&amp;#34; &amp;#34;B&amp;#34; とするとx(1)でAを、x(2)でBを参照できます。 定理の検索がしたい   jEditならQueryパネルにダブルクォートで囲って項を渡すとその項を含む定理を検索できます。ここにはパターンを渡すのでワイルドカードとしてアンダーバーも使えます。 name: hoge とかやると定理の名前にhogeを含むものという意味にもなります。 jEditのマーカーつくやつ何？     紫: コマンド評価中。これが数秒同じ所で止まっているならその証明は重いのでやめたほうがいいかもしれない。    赤下線: エラー    青下線: info的な情報を出してくれます。前の定理から即座に示せる場合はsolve_direct、反例が見つかる場合はquickcheckなどがたまに教えてくれます。    オレンジ下線: 警告。パース関係の警告(この項は〜とも〜ともパースできるよみたいなやつ)は無視しないほうがいいです。   その他  (jEditなどがないと)ソースコードが読めない   Isabelleはユニコード文字をタグみたいにして埋め込むのでソースコード自体は直接読むに耐えないのですが、 例えばgithubとかに公開するとかブラウザが使えるならドキュメントを用意しておくのがおすすめです。  詳しくはドキュメントを見てもらうといいんですが、プロジェクトのルートにROOTというファイルを置いて内容書いてコマンド走らせると公式のソースコード表示しているやつみたいな感じでHTMLが生成されます。 ちなみにpdfにも吐けます。 まとめ   こういうのっていざ書こうとしたら意外と思いつかないものですね。 なんか思いついたら追加したりしようかなと思います。 </description>
      </item>
    
      <item>
        <title>IMPのoperational semantics その4</title>
        <link>https://myuon.github.io/posts/2017csadv-day8/</link>
        <pubDate>Fri, 08 Dec 2017 00:01:48 +0900</pubDate>
        <guid>https://myuon.github.io/posts/2017csadv-day8/</guid>
        <description>これは一人Computer Scienceアドベントカレンダー 8日目の記事です。   前回は、big-stepがdeterministicであることを示した。 9. Small-step long reduction   csmallを複数回適用した、ということを表す関係を &amp;lt;_,_&amp;gt; ⟶* &amp;lt;_,_&amp;gt; でかいて、次のように定める。 subsubsection {* small-step long reduction *} inductive csmall_long (&amp;#34;&amp;lt;_,_&amp;gt; ⟶* &amp;lt;_,_&amp;gt;&amp;#34;) where SL_refl: &amp;#34;&amp;lt;c,st&amp;gt; ⟶* &amp;lt;c,st&amp;gt;&amp;#34; | SL_trans1: &amp;#34;⟦ &amp;lt;c,st&amp;gt; ⟶ &amp;lt;c&amp;#39;,st&amp;#39;&amp;gt;; &amp;lt;c&amp;#39;,st&amp;#39;&amp;gt; ⟶* &amp;lt;c&amp;#39;&amp;#39;,st&amp;#39;&amp;#39;&amp;gt; ⟧ ⟹ &amp;lt;c,st&amp;gt; ⟶* &amp;lt;c&amp;#39;&amp;#39;,st&amp;#39;&amp;#39;&amp;gt;&amp;#34; lemma SL_trans: &amp;#34;⟦ &amp;lt;c,st&amp;gt; ⟶* &amp;lt;c&amp;#39;,st&amp;#39;&amp;gt;; &amp;lt;c&amp;#39;,st&amp;#39;&amp;gt; ⟶* &amp;lt;c&amp;#39;&amp;#39;,st&amp;#39;&amp;#39;&amp;gt; ⟧ ⟹ &amp;lt;c,st&amp;gt; ⟶* &amp;lt;c&amp;#39;&amp;#39;,st&amp;#39;&amp;#39;&amp;gt;&amp;#34; apply (induction arbitrary: c&amp;#39;&amp;#39; st&amp;#39;&amp;#39; rule: csmall_long.induct) apply simp apply (blast intro: SL_trans1) done lemma SL_SeqStep: &amp;#34;&amp;lt;c1,st&amp;gt; ⟶* &amp;lt;c1&amp;#39;,st&amp;#39;&amp;gt; ⟹ &amp;lt;c1;;c2,st&amp;gt; ⟶* &amp;lt;c1&amp;#39;;;c2,st&amp;#39;&amp;gt;&amp;#34; apply (induction arbitrary: c2 rule: csmall_long.</description>
      </item>
    
      <item>
        <title>IMPのoperational semantics その3</title>
        <link>https://myuon.github.io/posts/2017csadv-day7/</link>
        <pubDate>Thu, 07 Dec 2017 00:18:10 +0900</pubDate>
        <guid>https://myuon.github.io/posts/2017csadv-day7/</guid>
        <description>これは一人Computer Scienceアドベントカレンダー 7日目の記事です。   前回はcommandとcommandの評価を定義した。 6. Coherent lemmas  SKIP  subsection {* Coherent lemmas *} lemma coh_B_Skip: assumes &amp;#34;&amp;lt;SKIP,st&amp;gt; ⇓ st&amp;#39;&amp;#34; shows &amp;#34;st = st&amp;#39;&amp;#34; using cbig.cases [OF assms] by auto   始めの補題はSKIPについてで、 &amp;lt;SKIP,st&amp;gt; ⇓ st&amp;#39; ならば st = st&amp;#39; というものである。 直観的には明らかであろうし、証明も場合分けをするだけで済む。 Ass  lemma coh_B_Ass: assumes &amp;#34;&amp;lt;x ::= a , st&amp;gt; ⇓ st&amp;#39;&amp;#34; shows &amp;#34;st&amp;#39; = st [x ↦ aeval st a]&amp;#34; using cbig.cases [OF assms] by auto   次は変数への代入。これも簡単なので省略。 Seq  lemma coh_B_Seq: assumes &amp;#34;&amp;lt;c1 ;; c2 , st&amp;gt; ⇓ st&amp;#39;&amp;#34; obtains st&amp;#39;&amp;#39; where &amp;#34;&amp;lt;c1 , st&amp;gt; ⇓ st&amp;#39;&amp;#39;&amp;#34; and &amp;#34;&amp;lt;c2 , st&amp;#39;&amp;#39;&amp;gt; ⇓ st&amp;#39;&amp;#34;   &amp;lt;c1 ;; c2,st&amp;gt; ⇓ st&amp;#39; ならば、 c1 を実行すると評価が停止し、さらにその後 c2 を実行すると st&amp;#39; の状態になって評価が停止するということが言えるはずである。 上では後々の便利さのために obtains .</description>
      </item>
    
      <item>
        <title>IMPのoperational semantics その2</title>
        <link>https://myuon.github.io/posts/2017csadv-day6/</link>
        <pubDate>Wed, 06 Dec 2017 00:07:53 +0900</pubDate>
        <guid>https://myuon.github.io/posts/2017csadv-day6/</guid>
        <description>これは一人Computer Scienceアドベントカレンダー 6日目の記事です。   前回はaexp/bexpとそのevaluationを定めた。 3. Commands   さて次にcommandを定義する。  これはIMPの「命令」や「文」にあたるもので、変数の代入、If文、While文などが用意されている。 section {* Commands *} subsection {* Syntax *} datatype com = CSkip | CAssign id aexp | CSeq com com | CIf bexp com com | CWhile bexp com notation CSkip (&amp;#34;SKIP&amp;#34;) and CAssign (&amp;#34;_ ::= _&amp;#34; [50,50] 90) and CSeq (infixr &amp;#34;;;&amp;#34; 30) and CIf (&amp;#34;IF _ THEN _ ELSE _&amp;#34; 80) and CWhile (&amp;#34;WHILE _ DO _&amp;#34; 90)   comを定義した後、notationによって各コンストラクタをよりそれらしいnotationで記述できるようにしている。 このように定義しておくと、例えば以下のような記述ができるようになる。 WHILE BLeq (AId &amp;#39;&amp;#39;X&amp;#39;&amp;#39;) (ANum 0) DO IF BTrue THEN &amp;#39;&amp;#39;X&amp;#39;&amp;#39; ::= ANum 1 ;; &amp;#39;&amp;#39;Y&amp;#39;&amp;#39; ::= ANum 10 ELSE SKIP  4.</description>
      </item>
    
      <item>
        <title>IMPのoperational semantics その1</title>
        <link>https://myuon.github.io/posts/2017csadv-day5/</link>
        <pubDate>Tue, 05 Dec 2017 00:02:29 +0900</pubDate>
        <guid>https://myuon.github.io/posts/2017csadv-day5/</guid>
        <description>これは一人Computer Scienceアドベントカレンダー 5日目の記事です。   今回から実際に実践的な証明をしながらIsabelleの解説をしていこうと思います。 そしてこの記事は一人computer scienceアドベントカレンダーなのでCSらしい話題を、ということで、 IMPのoperational semanticsの話でもしようと思います。 IMPについて   IMPとはimperative languageの頭文字を取ったもので、natとboolを基本型にもつ簡単な手続き型言語です。 CSの教科書とかでよく見かけるやつです。 IMPの定義をし、そのevaluationを定めます。  ただし、IMPはチューリング完全なので評価は一般には停止しません。つまりプログラムを「評価」して結果を返すような関数は全域関数にはなりません。 このような評価を表す部分関数(関係)を定め、実際にこれがいい感じの性質をもつことを示していきます。 0. States   IMPの定義を行う前の準備。IMPは変数を扱うことができるので変数名を処理するための型が必要になるのと、プログラムの実行には実際に各変数の値を記録したもの(環境の一種)が必要になるのでそれらを定義する。 section {* States *} type_synonym id = string type_synonym state = &amp;#34;id ⇒ nat&amp;#34; definition empty :: &amp;#34;state&amp;#34; where &amp;#34;empty _ = 0&amp;#34; no_syntax &amp;#34;_maplet&amp;#34; :: &amp;#34;[&amp;#39;a, &amp;#39;a] ⇒ maplet&amp;#34; (&amp;#34;_ /↦/ _&amp;#34;) fun update :: &amp;#34;state ⇒ id ⇒ nat ⇒ state&amp;#34; (&amp;#34;_[_ ↦ _]&amp;#34; [80,80,80] 80) where &amp;#34;update st x n y = (if x = y then n else st y)&amp;#34;   sectionコマンドは証明には影響を与えないが、Sidekickにsectionとして表示されたりLaTeXに出力すると実際に節として扱われたりするもの。chapter, subsectio, subsubsectionなどもある。  さて、 id で変数名を表すことにし、さらに環境を表す state を定めた。 ここでは id として string を、 state としてidを受け取ってnatを返す関数を使うことにした。(変数に格納される値は常にnatである)  Isabelleで文字列リテラルは &amp;#39;&amp;#39;hoge&amp;#39;&amp;#39; と、シングルクオート2つで囲って表現する1。  さてここではupdateというstateを更新する関数を定義しているが、その前になにやらno_syntaxという箇所がある。 これは、update関数を演算子として st [x ↦ n] のように書きたいのだが、この記法がすでにある _maplet という記法と被ってしまうため既存の記法を解除するためのものである。 このように記法が被った場合、すでにある演算子の定義を調べ(jEditならCtrlを押しながらクリックとかで定義箇所に飛べる)、それをno_syntaxやno_notationで解除することができる。 1.</description>
      </item>
    
      <item>
        <title>Isabelle/HOLの基本 その3</title>
        <link>https://myuon.github.io/posts/2017csadv-day4/</link>
        <pubDate>Mon, 04 Dec 2017 00:39:09 +0900</pubDate>
        <guid>https://myuon.github.io/posts/2017csadv-day4/</guid>
        <description>これは一人Computer Scienceアドベントカレンダー 4日目の記事です。   テキスト代わりのチュートリアル: prog-prove.pdf  前回はHOLと自動証明についてやりました。 今回やる4章では、Isarという新しい言語(？)について見ていきます。 4. Isar: A Language for Structured Proofs   IsabelleはIsarという、structured proofを記述するための言語を別に提供している。 これはapplyを繋げて証明をするのとは違い、構造化された証明をキーワードを組み合わせて記述する、より自然言語による証明に近い記述を可能にする言語である。  Isarのsyntaxのコアは次のようになっている(実際はもっと膨大): proof = &amp;#39;by&amp;#39; method | &amp;#39;proof&amp;#39; [method] step* &amp;#39;qed&amp;#39; step = &amp;#39;fix&amp;#39; variables | &amp;#39;assume&amp;#39; proposition | [&amp;#39;from&amp;#39; fact+] (&amp;#39;have&amp;#39; | &amp;#39;show&amp;#39;) proposition proof proposition = [name :] &amp;#34;formula&amp;#34;  4.1 Isar by Example   初めにIsarによる証明を見せるので眺めてみよう。 lemma &amp;#34;¬ surj (f :: &amp;#39;a ⇒ &amp;#39;a set)&amp;#34; proof - assume srjf: &amp;#34;surj f&amp;#34; from srjf have fa: &amp;#34;∀A.</description>
      </item>
    
      <item>
        <title>Isabelle/HOLの基本 その2</title>
        <link>https://myuon.github.io/posts/2017csadv-day3/</link>
        <pubDate>Sun, 03 Dec 2017 00:01:48 +0900</pubDate>
        <guid>https://myuon.github.io/posts/2017csadv-day3/</guid>
        <description>これは一人Computer Scienceアドベントカレンダー 3日目の記事です。   テキスト代わりのチュートリアル: prog-prove.pdf  前回は導入と型・関数・証明について学びました。 今回やる3章では、HOLについてと証明を書く際に知っておくと便利なあれこれについてです。 3. Logic and Proof Beyond Equality  3.1 Formulas   HOLのformulaの定義は次: form ::= True | False | term = term | ¬ form | form ∧ form | form ∨ form | form --&amp;gt; form | ∀x. form | ∃x. form   termはラムダ式とifとかcaseとかletとかそのへん 3.2 Sets   &amp;#39;a のsetを &amp;#39;a set とかく。次のようなnotationが定義されている。    {} , {e1,e2,e3}    e ∈ A , A ⊆ B    A ∪ B , A ∩ B , A − B, − A    {x | P}    HOLのsetはかなり便利なので積極的に使っていこう。 3.</description>
      </item>
    
      <item>
        <title>Isabelle/HOLの基本 その1</title>
        <link>https://myuon.github.io/posts/2017csadv-day2/</link>
        <pubDate>Sat, 02 Dec 2017 00:00:44 +0900</pubDate>
        <guid>https://myuon.github.io/posts/2017csadv-day2/</guid>
        <description>これは一人Computer Scienceアドベントカレンダー 2日目の記事です。  さて今回よりIsabelle/HOL(HOLはライブラリの名前)の基本の解説をしていきます。 一応極基本的なことを最初に少し説明をしてから、あとは実践形式で実際に証明を書きながら細かい機能などの説明をしていく予定です。 説明に割くページ数とコンテンツの内容と時間的な問題で、定理証明とは何かなどは詳しく話しません。 Isabelle資料   Isabelleのお勉強のための資料をまとめておきます。    prog-prove.pdf: 公式チュートリアルの一番基本のやつ。入門するならこれだけは 必ず読みましょう 。チュートリアルは他にもトピックごとに色々あるよ！    isar-ref: 主にIsarに関するReference Manualだけど慣れてきたら参照する機会が多いと思う。    caeruiroさんのIsabelle Tutorialシリーズ: 大変貴重な日本語の入門記事。Isabelle-2009を使っているらしいのでもしかしたら古い記述もあるかもしれない。    Concrete Semantics: Isabelleでプログラミング言語のセマンティクスとかやるテキスト。前半はIsabelle入門、後半はCSのテキストみたいな構成。    AFP: Archive of Formal Proofs; Isabelleで証明されたあれこれが投稿されてる証明集みたいなサイト    Isabelleの入門の入門: 遥か昔に書いた記事; 何かの役には立つかもしれない   このシリーズの目的   prog-prove.pdfを読んでねでチュートリアルを済ませてしまっても良いのですが、まぁ読んでって言って読んでもらった試しがないので もう少し実際に証明を書きながら解説をすることで、英語が読みたくない人や雰囲気だけ知りたい人にも優しい解説シリーズになればいいかなと思っています。 ひとまずこのIsabelle/HOLの基本シリーズでは上のprog-prove.pdfに沿って話を進めていきます。  内容全部やるなら単なる翻訳になってしまうので適度にぶっ飛ばしつつ要所要所を解説していく感じにします。 定理証明全くしたことないと厳しいこともあるかもぐらいでお願いします。 はじめに. jEditについて   現在Isabelleが公式にサポートしているのはjEditのみです1。 jEditを起動し、エディター画面とアウトプットパネルが表示されていれば問題ありません。アウトプットパネルはなければ Plugins&amp;gt;Isabelle から表示させます。  よく使うパネルを一通り説明しておきます。    Documentation: Isabelleは豊富な公式ドキュメントが用意されています。    Sidekick: 現在開いているファイルのアウトライン的なものが表示されます。    State: なんやねんこれ    Theories: 複数のファイルを開いている場合に、各ファイルのどの辺りまでcheckerが走っているかが一覧で表示されたものです。    Output: ここに情報が表示されます。証明は基本的にこのパネルを見ながら書きます。    Query: 既知の定理の検索などを行います。    Sledgehammer: 現在focusしている証明に対してsledgehammer(後述)を実行することができます。    Symbols: unicode symbolを入力するために使います。   1.</description>
      </item>
    
      <item>
        <title>一人CSアドベントカレンダー開催のお知らせ</title>
        <link>https://myuon.github.io/posts/2017csadv-day1/</link>
        <pubDate>Fri, 01 Dec 2017 00:06:00 +0900</pubDate>
        <guid>https://myuon.github.io/posts/2017csadv-day1/</guid>
        <description>  これは一人Computer Scienceアドベントカレンダー 1日目の記事です。 概要的なもの   「一人アドベントカレンダーって面白そうだな、やってみたい」みたいなノリで登録したんですが、 25日毎日記事を同じテーマで投稿し続けるのどう考えてもめっちゃ大変なのでやはりここは自分が一番得意な分野で行くしかないかなとなりCS関係ということになりました。  上のQiitaのページでも書いてますが、キーワードとして&amp;#34;ラムダ計算・定理証明・Haskell・ML・圏論 とかなんかそのへん&amp;#34;を挙げていますので そのへんのお話になります。今のところは無難に定理証明を中心にテーマをいくつか選んでおいたので多分そのへんの話です。 スケジュール   最終的にはQiitaのカレンダー見ればわかることなんでいいんですが一応今後どういう感じで進めていくのかのスケジュール的なものをまとめておきます。 Isabelle編  Isabelle/HOL入門(3-4日くらい)   最初にIsabelle(ここではHOL系しか扱わない)に入門します。って言ってもチュートリアルの解説をするだけです。 ある程度知ってる人が読む意味はないんですが、Isabelle全く知らん人向けに日本語で読める資料ってあんまりなさそうなので、チュートリアルを適当にやるだけでも実は意味があるんでは的な発想でとりあえずこれをやることにしました。  真面目に入門したくて英語にそこまで抵抗ない人は公式のprog-prove.pdf読みに行く方が早いです。 Isabelleでの定理証明・基礎編(3-4日くらい)   ここでは実際にIsabelle/HOLを使った証明を紹介・解説していきます。今の所IMPの意味論ちょろっとやるみたいな感じです。 Isabelleの解説がメインなので内容は薄いですがIsabelleってこうやって使うんだよ〜証明ってこうやって書くんだよ〜って雰囲気が伝わればいいかなと思っています。 (そういうのが伝わる日本語資料もあんまりない気がしたので) Isabelleでの定理証明・実践編(2-3日+2日？くらい)   せっかくなので個人的にこの前お世話になったりしたNominal Isabelle使ってtyped lambda calculusの簡単な証明とかやってみようかなという内容です。 あとかつてIsabelleで圏論(Yoneda lemma示すくらいまで)もやったことあるのでその解説もやってもいいかもしれないということで2日分くらいは余裕を持たせてあります。  この辺は後で変更あるかも知れないのでそのへんはあしからず。 Haskell編  ライブラリ紹介(1日1ライブラリ, 日数未定)   Haskellで最近使ったり使ってなかったりするライブラリの紹介とか解説とかをします。 ここ以外のコンテンツで25日分埋まらなかった場合に備えて空けてある枠なので日数は未定です。 Haskell編の最初にまとめてやるかも不明ですが一応ってことで。 定理証明支援系を作ろう・理論編(2-3日くらい)   ここからがメインコンテンツで、Haskellを使ってproof assistantを作ります。 (最初に断っておくとproverは作りません。あくまでcheckerとそのassistする部分がメインです。)  多分色々前提になる知識を解説したり、proof assistantを作るには何が必要かとかの説明がいると思うのでそのへんを初めに少し解説します。 定理証明支援系を作ろう・実践編(5-7日くらい)   proof assistantを実際に作っていきます。  最初はステップアップで徐々に拡張して行く感じで作ろうと思っていたんですが、特に参考にできるものもなく始めてだったので自分で手を動かして作ってみた所そうそう前に進めるはずもなく backwardな変更が出過ぎてステップアップするのつらすぎたので普通に現在のproof assistantのコードの解説になります。  checkerのコア機能の解説→assist機能関係の解説→プラグイン・拡張部分の解説 の順になります。 定理証明支援系を作ろう・拡張編(1日)   上で作ったものは当然ですがまともに証明を書こうとすると色々足りないので、今後ちゃんとしたassistantにするにはどういう感じの拡張が欲しいかな〜とかそういう話を、 「開発が間に合わなかったものは全部読者への演習問題にしたらええねん」的な思想により丸投げされるコーナーです。 まとめ   最終日は多分まとめと振り返りに使います。  これでだいたい25日分になるはず。 意気込み的な   開催にあたり内容よりも25日にわたってずっとブログを書き続けるのがつらそう という感情しかないんですが まぁせっかくなので楽しんでいこうと思います。  あと無理はよくないのでしんどくなったら細切れにしていこうというのも気をつけていきたい。  というわけで、読んでくれる人は25日の間どうぞお付き合いください。よろしくお願いします。 </description>
      </item>
    
  </channel>
</rss>
