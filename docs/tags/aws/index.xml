<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on The curse of λ</title>
    <link>https://myuon.github.io/tags/aws/</link>
    <description>Recent content in Aws on The curse of λ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 11 Feb 2019 00:22:05 +0900</lastBuildDate>
    
      <atom:link href="https://myuon.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
      <item>
        <title>DynamoDB LocalをTerraformから使う</title>
        <link>https://myuon.github.io/posts/dynanmodb-local-terraform/</link>
        <pubDate>Mon, 11 Feb 2019 00:22:05 +0900</pubDate>
        <guid>https://myuon.github.io/posts/dynanmodb-local-terraform/</guid>
        <description>タイトルの通り。大体以下のPRの説明読めば分かる。
https://github.com/hashicorp/terraform/pull/2825
Terraform側の設定 local envで環境を作ってDynamoDB Localをテスト用途で動かすという前提。以下がproject structure。
&amp;lt;project root&amp;gt; - infrastructure - local/ - main.tf ここにDynamoDB Localの設定を入れる - modules/ - dynamodb/table.tf ここにテーブルの設定など  infrastructure/local/main.tfでは、endpointsを指定することができる。(デプロイ時にこのendpointを参照してテーブルを作ったりする)
provider &amp;quot;aws&amp;quot; { region = &amp;quot;ap-northeast-1&amp;quot; endpoints { dynamodb = &amp;quot;http://localhost:8000&amp;quot; } }  DynamoDB Localは普通に動かせばよい。
port:8000で起動させたら、いつも通りterraform -e dev applyでDynamoDB Localにテーブルができる。
スクリプト テストで使おうと思ったら、このDynamoDB Localを立ち上げる→terraform apply→テスト実行→DynamoDB Localを落とすを何度も繰り返すことになって面倒なので、私はMakefileを書いている。
install: mkdir -p ./infrastructure/local/.dynamodb cd ./infrastructure/local/.dynamodb; \ 	wget https://s3-ap-northeast-1.amazonaws.com/dynamodb-local-tokyo/dynamodb_local_latest.tar.gz; \ 	tar -xf ./dynamodb_local_latest.tar.gz test: $(MAKE) startTest # ここでテスト export .</description>
      </item>
    
      <item>
        <title>Lambda FunctionをReasonで書く</title>
        <link>https://myuon.github.io/posts/serverless-reason/</link>
        <pubDate>Fri, 23 Nov 2018 21:00:48 +0900</pubDate>
        <guid>https://myuon.github.io/posts/serverless-reason/</guid>
        <description>Reason ML、やっていこうな 世はまさに大サーバーレス時代なのでLambda Functionやっていきというお気持ち。
AWS Lambdaで現時点(2018年11月)で対応されている言語はNode.js, Python, Go, C#(dotnet), Javaの5つ。このうち後ろ2つはコールドスタートが激遅なので使い物にならない。で前3つのうちではドキュメントの多いNode.jsが安定ですが、Node.jsをランタイムに採用するとしてしかしJSは書きたくない、そういうときにReason MLはいい感じな選択肢なのでは？というのがこの記事の趣旨です。
serverless-reason serverless frameworkというサーバーレスアプリをやるのにとても便利なツールがあって、それのReasonで動くテンプレートを作っておいたので好きに使ってくださいという感じ。
 
以下このプロジェクトの中身の解説をする。
echo.re Lambda Functionとしてechoというものがsrc/functions/echo.reに定義されている。
/* Sorry I&amp;#39;m a lazy person! */ type event = { . &amp;#34;pathParameters&amp;#34;: Js.Dict.t(string), }; type context = unit; type callback = (. Js.null(string), Js.Json.t) =&amp;gt; Js.Promise.t(unit); type response = { . &amp;#34;statusCode&amp;#34;: int, &amp;#34;body&amp;#34;: string, }; let handler : (event, context, callback) =&amp;gt; Js.Promise.t(response) = (event, _, _) =&amp;gt; { Js.</description>
      </item>
    
  </channel>
</rss>
